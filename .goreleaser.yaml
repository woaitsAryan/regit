# This is an example .goreleaser.yml file with some sensible defaults.
# Make sure to check the documentation at https://goreleaser.com

# The lines below are called `modelines`. See `:help modeline`
# Feel free to remove those if you don't want/need to use them.
# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj

version: 1

before:
  hooks:
    # You may remove this if you don't use go modules.
    - go mod tidy
    # you may remove this if you don't need go generate
    # - go generate ./...

builds:
  - env:
      - CGO_ENABLED=0
    goos:
      - linux
      - windows
      - darwin
    ignore:
      - goos: darwin
        goarch: "386"
      - goos: linux
        goarch: "386"
      - goos: windows
        goarch: "386"

archives:
  - format: tar.gz
    # this name template makes the OS and Arch compatible with the results of `uname`.
    name_template: >-
      {{ .ProjectName }}_
      {{- if eq .Os "darwin" }}MacOS
      {{- else }}{{ title .Os }}{{ end }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else }}{{ .Arch }}{{ end }}

    format_overrides:
      - # Which GOOS to override the format for.
        goos: windows

        format: zip

changelog:
  sort: asc
  filters:
    exclude:
      - "^docs:"
      - "^test:"

universal_binaries:
  - replace: true

winget:
  - # Name of the recipe
    #
    # Default: ProjectName
    # Templates: allowed
    name: regit

    # Publisher name.
    #
    # Templates: allowed
    # Required
    publisher: Aryan Bharti Inc

    # Your app's description.
    #
    # Templates: allowed
    # Required
    short_description: "regit a is a CLI for managing git repositories and histories"

    # License name.
    #
    # Templates: allowed
    # Required
    license: "mit"

    # Publisher URL.
    #
    # Templates: allowed
    publisher_url: https://github.com/woaitsaryan/regit

    # Publisher support URL.
    #
    # Templates: allowed
    publisher_support_url: "https://github.com/woaitsAryan/regit/issues"

    # Package identifier.
    #
    # Default: Publisher.ProjectName
    # Templates: allowed
    package_identifier: aryanbharti.regit

    # IDs of the archives to use.
    # Empty means all IDs.
    # ids:
    #   - foo
    #   - bar

    # Which format to use.
    #
    # Valid options are:
    # - '':        archives or binaries
    # - 'msi':     msi installers (requires the MSI pipe configured, Pro only)
    # - 'archive': archives (only if format is zip),
    # - 'binary':  binaries
    #
    # Default: ''
    # Since: v1.24 (pro)
    # use: binary

    # GOAMD64 to specify which amd64 version to use if there are multiple
    # versions from the build section.
    #
    # Default: v1
    goamd64: v1

    # Product code to be used.
    #
    # Usually needed when `use: msi`.
    #
    # Since: v1.24 (pro)
    # product_code: AAAA-BBB-CCC-DDD-EEEFFF

    # URL which is determined by the given Token (github, gitlab or gitea).
    #
    # Default depends on the client.
    # Templates: allowed
    url_template: "https://github.com/woaitsAryan/regit/releases/download/{{ .Tag }}/{{ .ArtifactName }}"

    # Git author used to commit to the repository.
    commit_author:
      name: woaitsAryan
      email: yoprince.ab@gmail.com

    # The project name and current git tag are used in the format string.
    #
    # Templates: allowed
    commit_msg_template: "{{ .PackageIdentifier }}: {{ .Tag }}"

    # Path for the file inside the repository.
    #
    # Default: manifests/<lowercased first char of publisher>/<publisher>/<version>
    path: manifests/g/goreleaser/1.19

    # Your app's homepage.
    homepage: "https://github.com/woaitsAryan/regit"

    # Your app's long description.
    #
    # Templates: allowed
    description: "regit is a CLI tool written in Golang with several features to manage git repositories and histories."

    # License URL.
    #
    # Templates: allowed
    license_url: "https://raw.githubusercontent.com/woaitsAryan/regit/main/LICENSE"

    # Copyright.
    #
    # # Templates: allowed
    # copyright: "Becker Software LTDA"

    # # Copyright URL.
    # #
    # # Templates: allowed
    # copyright_url: "https://goreleaser.com/copyright"

    # Setting this will prevent goreleaser to actually try to commit the updated
    # package - instead, it will be stored on the dist directory only,
    # leaving the responsibility of publishing it to the user.
    #
    # If set to auto, the release will not be uploaded to the repository
    # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
    #
    # Templates: allowed
    skip_upload: true

    # Release notes.
    #
    # If you want to use the release notes generated by GoReleaser, use
    # `{{.Changelog}}` as the value.
    #
    # Templates: allowed
    release_notes: "{{.Changelog}}"

    # Release notes URL.
    #
    # Templates: allowed
    # release_notes_url: "https://foo.bar/changelog/{{.Version}}"

    # Tags.
    tags:
      - golang
      - cli

    # Package dependencies.
    #
    # Since: v1.21
    # # Templates: allowed
    # dependencies:
    #   - package_identifier: Foo.Bar
    #     minimum_version: 1.2.3


    # Repository to push the generated files to.
    repository:
      # Repository owner.
      #
      # Templates: allowed
      owner: woaitsAryan

      # Repository name.
      #
      # Templates: allowed
      name: winget-pkgs

      # Optionally a branch can be provided.
      #
      # Default: default repository branch
      # Templates: allowed
      branch: main

      # Optionally a token can be provided, if it differs from the token
      # provided to GoReleaser
      #
      # Templates: allowed
      # token: "{{ .Env.GITHUB_PERSONAL_AUTH_TOKEN }}"

      # Optionally specify if this is a token from another SCM, allowing to
      # cross-publish.
      #
      # Only taken into account if `token` is set.
      #
      # Valid options:
      # - 'github'
      # - 'gitlab'
      # - 'gitea'
      #
      # This feature is only available in GoReleaser Pro.
      # Since: v1.26 (pro)
      # token_type: "github"

      # Sets up pull request creation instead of just pushing to the given branch.
      # Make sure the 'branch' property is different from base before enabling
      # it.
      #
      # Since: v1.17
      # pull_request:
      #   # Whether to enable it or not.
      #   enabled: true

      #   # Whether to open the PR as a draft or not.
      #   #
      #   # Since: v1.19
      #   draft: true

      #   # If the pull request template has checkboxes, enabling this will
      #   # check all of them.
      #   #
      #   # This feature is only available in GoReleaser Pro, and when the pull
      #   # request is being opened on GitHub.
      #   # Since: v1.20 (pro)
      #   # check_boxes: true

      #   # Base can also be another repository, in which case the owner and name
      #   # above will be used as HEAD, allowing cross-repository pull requests.
      #   #
      #   # Since: v1.19
      #   base:
      #     owner: goreleaser
      #     name: my-repo
      #     branch: main

      # # Clone, create the file, commit and push, to a regular Git repository.
      # #
      # # Notice that this will only have any effect if the given URL is not
      # # empty.
      # #
      # # Since: v1.18
      # git:
      #   # The Git URL to push.
      #   #
      #   # Templates: allowed
      #   url: 'ssh://git@myserver.com:repo.git'

      #   # The SSH private key that should be used to commit to the Git
      #   # repository.
      #   # This can either be a path or the key contents.
      #   #
      #   # IMPORTANT: the key must not be password-protected.
      #   #
      #   # WARNING: do not expose your private key in the configuration file!
      #   #
      #   # Templates: allowed
      #   private_key: '{{ .Env.PRIVATE_KEY_PATH }}'
